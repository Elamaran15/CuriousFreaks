üíº Java Developer | SpringBoot | Interview Questions | 

1) what is marker interface
2) Why use a marker interface?
3) when to use interface and abstract class?
4) what is the use of constructor in java?
5) what is static method
6) can we use static method in constructor
7) what is the contract between hashcode and equals methods
8) what is failfast iteration and how will we resolve
9) what are virtualthreads
10) diff between map vs flatmap in java8
11) what are sealed classes
12) what are spring boot advantages
13) what is application context
14) what are the scope in spring
15) diff between prototype and request scope
16) what are components of kafka
17) what is partition in kafka
18) how to handle if consumer keeps on 
19) How to handle dependency Injection in SpringBoot
20) What is Authentication & Authorization?

21) What are the error codes used?
22) What is 404,402, 502, 503, 401 error codes?
23) How to handle "Not Found" error?
24) What is the issue behind "Bad Request" error?
25) What is @Mockito?
26) When and when not to use @Mock?
27) What is Error and Exception?
28) How to handle OutOfMemoryException
29) How to handle "Service Not Found" error even when the beans are properly registered?
30) How to debug in local and remote repository??
31) How to create pipeline and deploy in Jenkins?
32) What happens when there is a collision in HashMap?
33) What is hashcode() and equals() method and its uses?
34) What is multithreading? How multithreading is implemented in my project?
35) What is NullPointerException? and How it is handled?
36) Is server port and debug port same?
37) DB @Bean and @Autowired?
39) What is FunctionalInterface?
40) What is ClassCastException?
41) How to handle Gateway Timeout and Service Unavailable error in project?



Java

1. What are sealed classes in Java and where would you use them?

2. How do Stream.peek() and forEach() differ in behavior?

3. Explain the concept of immutable collections introduced in Java 9+.

4. What is the difference between List.of() and Arrays.asList()?

5. How do virtual threads (Project Loom) improve concurrency performance?

6. Describe how switch expressions with yield work in Java 14+.

7. What are the use cases for Completable Future and how does it help in async programming?

8. How does instanceof pattern matching enhance type safety in Java 16+?

9. What are some new string methods introduced in Java 11+?

10. How does Map.of() behave with duplicate keys?

Spring + Spring Boot

11. How does Spring Boot auto-configuration determine which beans to create?

12. What's the purpose of @ConditionalOnProperty annotation?

13. Explain how you implement custom validation in Spring Boot using annotations.

14. How does @Transactional handle nested transactions?

15. Difference between application.properties and application.yml in Spring Boot?

16. How do you externalize configuration in Spring Boot for different environments?

17. What is WebClient in Spring Boot and how is it different from Rest Template?

18. Explain lazy initialization and how to enable it in Spring Boot.

19. What are Spring Profiles and how do you switch between them?

20. How can you implement request rate limiting in a Spring Boot API?

Microservices

21. What is service discovery and how does Eureka or Consul handle it?

22. Explain how you implement centralized logging in a microservices architecture.

23. How do you maintain backward compatibility in evolving microservice APIs?

24. What strategies do you use for fault tolerance in microservices?

25. Implement a producer-consumer problem using BlockingQueue.
26. What is the role of schema registry when using Kafka with Avro?

27. How would you use Docker Compose to spin up a

microservices environment?

28. What are IAM roles and policies in AWS, and how do they relate to access control?

29. What is the difference between Kafka topic partitions and consumer groups?

30. Explain how ConfigMaps and Secrets are mounted in Kubernetes pods.

31. Write a SQL query to fetch departments with more than 5 employees.

32. What is blue-green deployment and how is it applied in CI/CD?

üîπ 1st Round ‚Äì Technical Discussion
_________________________________________

1. Introduce yourself and explain your project.
2. What is Fetch Type (Lazy vs Eager Loading)?
3. Explain and implement the Factory Design Pattern (with some modifications).
4. What is JWT security, and how have you used it in your project?
5. What do you know about ISO8583?
6. Difference between IOC and Dependency Injection
7. What is Dependency Injection and its types?

üîπ 2nd Round ‚Äì Coding
_________________________________________

1. 5 MCQs on Spring Boot
2. Modify and improve the given code
3. Find the second highest number in an array
4. Find a file in a subdirectory

üîπ 3rd Round ‚Äì Advanced Technical
_________________________________________

1. How have you used Spring Security in your project?
2. What is a Spring Boot profile, and how did you use it?
3. What is exception handling, and what is an advisor?
4. How does the @Transactional annotation work?
5. Explain microservices architecture
6. What is Kafka and how have you implemented it?
7. Explain design patterns
8. What are Java 8 features?
9. How did you implement scheduling in your project?
10. How can we create an Optional of an employee object?


‚úÖ Project & Technical Questions:
01) Introduce yourself.
02) What is Java OOPS?
03) What is Encapsulation?
04) Difference between Method Overriding and Method Overloading.
05) What is the final keyword?
06) Java 8 features.
07) What is a Functional Interface?
08) What are the types of Functional Interfaces?
09) What is a Predicate?
10) What is Java Streams?
11) What are the stereotype annotations you know? List any three.
12) Difference between @Service and @Component annotations.
13) What is the use of the @Qualifier annotation?
14) What is the @Transactional annotation?
15) Where do you configure the database connections in Spring Boot applications?
16) List any two database connection properties in the application.properties file.
17) What is Microservices Architecture?
18) How do different services communicate in the Microservices Architecture?

‚úÖStreams Problems
19) Write a Stream program to convert all names to uppercase.
20) Write a Stream program to find the frequency of each character in a string.
21) Write a Stream program to return employees grouped by their respective departments.
22) Find the 2nd highest salary employee name from the employee list using Streams.

‚úÖSQL Problems
23) Find the average salary of employees.
24) Write an INNER JOIN query for two tables (syntax level).


## Round 1 ##
----------------------------------------------------------------
1. What is a wrapper class?
2. Difference between heap and stack memory?
3. Difference between interface and abstract class
4. Java 8 features
5. Can a functional interface inherit another interface?
6. What is Git? How do you use it in your project?
7. What is Hystrix?
8. What is API Gateway? Responsibility of that.
9. What is Circuit Breaker pattern?
10. Advantages of Spring Boot.
11. What is Actuator?
12. What is dependency injection?
13. What is setter and constructor injection?
14. Second largest number from an array
15. String palindrome
16. How do you secure code?
17. How can you set validity for a token?
18. JWT
19. How do you validate the token?
20. Spring annotations
21. What is Stream in Java? Explain any of its methods in detail.

## Round 2 ##
----------------------------------------------------------------
1. Difference between @Component and @Service
2. Is a service internally a component or not?
3. What are service and repository classes?
4. Is HashMap thread-safe? Thread-safe version?
5. Do we have to write a method in a repo or not?
6. If we want to write a complex query, then how can we write it using a repo?
7. If two keys get the same hash code, then what?
8. Difference between @Controller and @RestController
9. Difference between Spring and Spring Boot
10. Version of Spring Boot and Spring used in the project.
11. First-level and second-level caching



1. What exactly is Spring Boot and how does it simplify Java development?

2. How is Spring Boot different from the traditional Spring Framework?

3. What does the @SpringBootApplication annotation really do under the hood?

4. What are Spring Boot Starters, and why are they a developer's best friend?

5. How does Auto-Configuration work in Spring Boot? When can it backfire?

6. How do you build a RESTful API using Spring Boot?

7. What are the different ways to implement Dependency Injection in Spring Boot?

8. How do you integrate and configure a database connection using Spring Boot?

9. What‚Äôs the difference between application.properties and application.yml? Which one should you use?

10. What is Spring Boot Actuator and how does it help in real-world monitoring?

11. How do you implement Global Exception Handling in Spring Boot?

12. What is the role of Spring Boot DevTools during development?

13. How do you package and deploy a Spring Boot application in production?

14. How do you perform validation in REST APIs using annotations?

15. What are the most commonly used annotations in Spring Boot and their purpose?



üî∞ 10 Basic Multithreading Questions (Level: Beginner)
1-What is a thread in Java?
2-How to create a thread using Thread and Runnable?
3-Difference between start() and run() methods
4-What is the lifecycle/states of a thread in Java?
5-What is the use of Thread.sleep()?
6-What is a daemon thread?
7-How does thread priority work in Java?
8-What is thread scheduling?
9-What is the difference between yield(), sleep(), and join()?
10-What are the different ways to stop a thread?

‚öôÔ∏è 10 Intermediate Multithreading Questions (Level: Medium)
11-What is synchronization and how does it prevent race conditions?
12-What is the difference between object lock and class lock?
13-What is a deadlock and how can it be avoided?
14-What is the difference between synchronized and ReentrantLock?
15-What is a volatile variable and how does it work?
16-What is the use of wait(), notify(), and notifyAll()?
17-What is thread-safe code? How do you write one?
18-How does ThreadLocal work in Java?
19-What are the advantages of using ExecutorService?
20-What is the difference between Runnable and Callable?

üöÄ 10 Advanced Multithreading Questions (Level: Expert)
21-What is the Fork/Join framework in Java?
22-How do Future and CompletableFuture differ?
23-What is a CountDownLatch and how is it used?
24-What is a CyclicBarrier? When should you use it?
25-What is a Semaphore and what are its use cases?
26-How to handle exceptions in multithreaded code?
27-How does the BlockingQueue help in producer-consumer problems?
28-What is false sharing and how does it affect multithreading performance?
29-What are some best practices for concurrent programming in Java?
30-How does the Java Memory Model affect multithreaded applications?

1. Explain your current project ‚Äì architecture, tech stack, and role.

2. How does Spring Security work and when would you apply it?

3. What is a Named Query in JPA?

4. Given input (1, 2, 3) ‚Üí expected output [1 ] [1 2] [1 2 3] [2 ][2 3][3 ]‚Äì how would you solve it?

5. Given {1, 2, 3, 4, 5} ‚Üí expected output {3, 4, 5, 1, 2} ‚Äì explain the logic.

6. What is the purpose of application.properties in Spring Boot?

7. What is a Serverless Function and how you used it?

8. Difference between Inner Join and Outer Join in SQL.

9. How does JWT Token Authentication work?

10. Can you explain the flow of a Spring Boot application from start to finish?

11. What does the @Transactional annotation do?

12. Database concepts ‚Äì What is a Primary Key and a Foreign Key?

13. What is a Spring Profile and how do you use it?


Round -1
Introduce yourself and explain your project.
Difference between IOC and Dependency Injection
What is Dependency Injection and its types?
How does the @Transactional annotation work?
What is Fetch Type (Lazy vs Eager Loading)?
 Explain and implement the Factory Design Pattern (with some modifications).
What is JWT security, and how have you used it in your project?

Round-2
MCQs on Spring Boot
Modify and improve the given code
What is Reflection in Java?
.ExecutorService in Java ?
Find the second highest number in an array using Java 8
Find a file in a subdirectory

Round-3
How have you used Spring Security in your project?
What is a Spring Boot profile, and how did you use it?
What is Kafka and how have you implemented it?
Explain design patterns
What are Java 8 features?
How did you implement scheduling in your project?
How can we create an Optional of an employee object?
What is Kafka and how have you implemented it?
What is exception handling, and what is an advisor?
How does the @Transactional annotation work?
Explain microservices architecture

√ò Can you introduce yourself and explain your role in your current project? 
√ò What are your primary day-to-day responsibilities? 
√ò You‚Äôve migrated from MQ to Kafka ‚Äî can you explain the differences and why Kafka was chosen?
√ò How do you handle retries and dead-letter topics in Kafka? 
√ò Can you explain your fraud scoring Kafka pipeline in detail?
√ò How do you design REST endpoints in Spring Boot?
√ò How do you secure them with JWT/OAuth2? 
√ò Can you walk through your approach for building the SFTP-to-REST API migration?
√ò How do you connect Spring Boot applications to PostgreSQL/Oracle? 
√ò How do you optimise SQL/PL-SQL queries for performance? 
√ò How do you handle database transactions across multiple microservices? 
√ò Can you explain the microservices architecture you implemented for ACH batch initiation? 
√ò How do you ensure service-to-service communication reliability? 
√ò How do you handle distributed transactions? 
√ò You‚Äôve built React-based dashboards. How do you integrate them with backend APIs? 
√ò How do you handle real-time updates in the UI (e.g., wire transfer statuses)? 
√ò How do you deploy to AWS ECS Fargate? 
√ò Can you explain your use of CloudWatch and S3 in production? 
√ò How do you integrate Spring Security with Active Directory groups?
√ò What‚Äôs your approach for role-based access control in microservices? 
√ò How do you achieve 85%+ code coverage with JUnit and Mockito? 
√ò How do you test Kafka-based workflows?
√ò How do you use SonarQube in your CI pipeline?
√ò How do you handle exceptions in your microservices? 
√ò How do you map exceptions to HTTP status codes?
√ò How do you log and monitor these exceptions in AWS?
√ò How do you handle file intake, archival, and retrieval in AWS S3?
√ò How do you identify bottlenecks in microservices?
√ò How do you design event-driven flows for SWIFT MT messages?
√ò How do you ensure idempotency in Kafka consumers?
√ò How have you used Jenkins/GitHub Actions/GitLab CI for deployments? 
√ò How do you handle blue-green or rolling deployments in ECS?
√ò If multiple statements in a single transaction partially succeed but one fails, what happens? 
√ò If a Kafka consumer crashes mid-processing, how do you handle data consistency? 
√ò Explain CompletableFuture and where you‚Äôve used it.
√ò Write a Java stream operation to: 
 o Convert a List<Transaction> into a Map<AccountId, List<Transaction>>. 
 o Flatten List<List<User>> into List<User>.
 o Filter transactions above a certain threshold and map them to IDs. 
√ò You mentioned using design patterns. Where have you applied Singleton or Factory patterns? 
√ò How do you apply Domain-Driven Design in your services?


1. Explain the difference between volatile, synchronized, and Atomic variables in Java.
2. How does the Java Memory Model (JMM) handle visibility and ordering of threads?
3. What is the difference between CompletableFuture and traditional Future in Java?
4. How do you implement a custom annotation in Java and process it at runtime?
5. Explain the difference between checked, unchecked, and error types in Java.
6. How does Garbage Collection work in Java 17+ (including G1 GC and ZGC)?
7. What are memory leaks in Java, and how do you detect and fix them?
8. How does Optional help in avoiding NullPointerException?
9. How do you implement caching in Spring Boot (with @Cacheable, @CacheEvict)?
10. What is the difference between BeanFactory and ApplicationContext?
11. Explain the Bean lifecycle in Spring (with example).
12. What are @Lazy and @DependsOn annotations in Spring, and when to use them?
13. How does Spring Boot auto-configuration work internally?
14. What is the role of spring.factories in Spring Boot?
15. What is the difference between application.properties and application.yml in Spring Boot?
16. How do you implement transaction management in Spring Boot (declarative vs programmatic)?
17. Explain the difference between @Transactional propagation types in Spring.
18. What is the difference between JpaRepository and CrudRepository in Spring Data JPA?
19. How do you handle pagination and sorting in Spring Data JPA?
20. How to implement a custom query in Spring Data JPA using @Query annotation?


üü¶ Core Java (Java 17 & 21)

 üîπ Garbage Collection improvements
 üîπ CompletableFuture vs Future
 üîπ parallelStream() ‚Äì internals & pitfalls
 üîπ Records vs DTOs
 üîπ Pattern Matching for switch
 üîπ Checked vs Unchecked Exceptions
 üîπ String.intern() usage
 üîπ Predicate, Consumer, Supplier ‚Äì real-world use cases
 üîπ Sealed Classes in domain modeling
 üîπ Safe object publishing in multithreading

üü¶ Spring & Spring Boot

 üîπ Dependency Injection & how Spring implements it
 üîπ Internals of @SpringBootApplication
 üîπ ApplicationContext vs BeanFactory
 üîπ Securing REST APIs with Spring Security
 üîπ @RequestMapping vs @GetMapping
 üîπ Configuring CORS in REST APIs
 üîπ Circular Dependency resolution
 üîπ DB integration with Spring Boot
 üîπ Actuator endpoints for monitoring
 üîπ Spring Boot DevTools for productivity

üü¶ Microservices

 üîπ API Gateway vs Service Registry
 üîπ Distributed Tracing with Sleuth & Zipkin
 üîπ Idempotent operations in microservices
 üîπ Async inter-service communication

üü¶ Coding Challenges

 ‚úÖ Reverse words in a sentence (without built-ins)
 ‚úÖ Find kth largest element in an array
 ‚úÖ Producer-Consumer using Threads

üü¶ Others

 üîπ Kafka partition rebalancing
 üîπ Persistent Volumes in Kubernetes
 üîπ SQL ‚Äì Top 3 highest paid employees per department
 üîπ Docker Volumes vs Bind Mounts
 üîπ Statelessness in REST APIs
 üîπ Monitoring with Prometheus + Grafana
 
 üìå Project & Technical Questions

1Ô∏è‚É£ Introduce yourself.
2Ô∏è‚É£ What is Inheritance?
3Ô∏è‚É£ Difference between Abstract Class and Interface.
4Ô∏è‚É£ What is a NullPointerException?
5Ô∏è‚É£ Difference between Method Overloading and Method Overriding.
6Ô∏è‚É£ Difference between Spring and Spring Boot.
7Ô∏è‚É£ Difference between List and Set.
8Ô∏è‚É£ How can you handle Exceptions in Java?
9Ô∏è‚É£ What is a REST API?
üîü What is Microservices architecture?
1Ô∏è‚É£1Ô∏è‚É£ What is a Collection in Java?
1Ô∏è‚É£2Ô∏è‚É£ What are Java Streams?
1Ô∏è‚É£3Ô∏è‚É£ What is a Lambda Expression?
1Ô∏è‚É£4Ô∏è‚É£ What is Token Authentication?
1Ô∏è‚É£5Ô∏è‚É£ What is Agile Methodology?
1Ô∏è‚É£6Ô∏è‚É£ How are HTTP methods used?
1Ô∏è‚É£7Ô∏è‚É£ Difference between ArrayList and LinkedList.
1Ô∏è‚É£8Ô∏è‚É£ What is Dependency Injection?
1Ô∏è‚É£9Ô∏è‚É£ List any two database connection properties in application.properties.
2Ô∏è‚É£0Ô∏è‚É£ Write a program to Reverse a String.
2Ô∏è‚É£1Ô∏è‚É£ Explain the internal working of HashMap.
2Ô∏è‚É£2Ô∏è‚É£ Write a query to find the 2nd highest salary (id, name, salary).

üöÄ 25 Advanced Core Java Interview Questions 
1Ô∏è‚É£ How does the JVM handle memory management (Heap vs Stack)?
 2Ô∏è‚É£ What is the difference between JDK, JRE, and JVM?
 3Ô∏è‚É£ Explain the working of the Garbage Collector in Java.
 4Ô∏è‚É£ What are strong, weak, soft, and phantom references?
 5Ô∏è‚É£ How does Java handle synchronization at method vs block level?
 6Ô∏è‚É£ Explain volatile keyword and its use cases.
 7Ô∏è‚É£ What is the difference between Callable and Runnable?
 8Ô∏è‚É£ How does the Java memory model ensure thread safety?
 9Ô∏è‚É£ Difference between HashMap, ConcurrentHashMap, and Hashtable?
 üîü How does Java handle class loading internally?
 1Ô∏è‚É£1Ô∏è‚É£ Explain the concept of reflection in Java.
 1Ô∏è‚É£2Ô∏è‚É£ What are dynamic proxies in Java?
 1Ô∏è‚É£3Ô∏è‚É£ Difference between fail-fast and fail-safe iterators?
 1Ô∏è‚É£4Ô∏è‚É£ How does Java achieve platform independence?
 1Ô∏è‚É£5Ô∏è‚É£ What is method handle in Java?
 1Ô∏è‚É£6Ô∏è‚É£ Difference between stack memory and heap memory?
 1Ô∏è‚É£7Ô∏è‚É£ Explain immutability in Java with String as example.
 1Ô∏è‚É£8Ô∏è‚É£ How does equals() and hashCode() contract work?
 1Ô∏è‚É£9Ô∏è‚É£ What are memory leaks in Java and how to prevent them?
 2Ô∏è‚É£0Ô∏è‚É£ Explain the difference between final, finally, and finalize().
 2Ô∏è‚É£1Ô∏è‚É£ What is the use of ThreadLocal in Java?
 2Ô∏è‚É£2Ô∏è‚É£ How does the ForkJoin framework work?
 2Ô∏è‚É£3Ô∏è‚É£ What is the difference between checked and unchecked exceptions?
 2Ô∏è‚É£4Ô∏è‚É£ How does Java 8‚Äôs Stream API handle parallelism?
 2Ô∏è‚É£5Ô∏è‚É£ What happens internally when you create an object in Java?
 
 1Ô∏è‚É£ Introduce yourself
2Ô∏è‚É£ What is Inheritance?
3Ô∏è‚É£ Difference between Abstract Class and Interface
4Ô∏è‚É£ What is a NullPointerException?
5Ô∏è‚É£ Difference between Method Overloading and Method Overriding
6Ô∏è‚É£ Difference between Spring and Spring Boot
7Ô∏è‚É£ Difference between List and Set
8Ô∏è‚É£ How can you handle Exceptions in Java?
9Ô∏è‚É£ What is a REST API?
üîü What is Microservices architecture?
1Ô∏è‚É£1Ô∏è‚É£ What is a Collection in Java?
1Ô∏è‚É£2Ô∏è‚É£ What are Java Streams?
1Ô∏è‚É£3Ô∏è‚É£ What is a Lambda Expression?
1Ô∏è‚É£4Ô∏è‚É£ What is Token Authentication?
1Ô∏è‚É£5Ô∏è‚É£ What is Agile Methodology?
1Ô∏è‚É£6Ô∏è‚É£ How are HTTP methods used?
1Ô∏è‚É£7Ô∏è‚É£ Difference between ArrayList and LinkedList
1Ô∏è‚É£8Ô∏è‚É£ What is Dependency Injection?
1Ô∏è‚É£9Ô∏è‚É£ List any two database connection properties in application.properties
2Ô∏è‚É£0Ô∏è‚É£ What is the difference between HashSet and TreeSet?
2Ô∏è‚É£1Ô∏è‚É£ How does Garbage Collection work in Java?
2Ô∏è‚É£2Ô∏è‚É£ Write a program to reverse a string
2Ô∏è‚É£3Ô∏è‚É£ Explain the internal working of HashMap
2Ô∏è‚É£4Ô∏è‚É£ Difference between SQL and NoSQL databases
2Ô∏è‚É£5Ô∏è‚É£ What are design patterns? Can you explain Singleton?
2Ô∏è‚É£6Ô∏è‚É£ Write a query to find the 2nd highest salary (id, name, salary)
2Ô∏è‚É£7Ô∏è‚É£ How would you optimize a slow SQL query?


üí° Takeaway:
The interview focused on fundamentals of Java, Spring Boot concepts, problem-solving, and databases, along with some deeper dives into collections, performance, and system design basics.

üëâ If you‚Äôre preparing, I‚Äôd recommend brushing up on:
 ‚Ä¢ Core OOP concepts (Inheritance, Polymorphism, Abstraction)
 ‚Ä¢ Java Collections & Multithreading
 ‚Ä¢ Java 8 features (Streams, Lambdas, Functional Interfaces)
 ‚Ä¢ Spring Boot (DI, Annotations, RestControllers)
 ‚Ä¢ Databases (SQL, Joins, Queries, Optimization)
 ‚Ä¢ System Design basics & Agile methodology
 
 üìå Senior Java Developer Interview Questions

üî∏Core Java & Advanced Concepts

1. Difference between == and .equals() in Java?
2. How does Garbage Collection work in Java? Explain different GC algorithms.
3. What are Optional, Stream API, and how do they improve code readability?
4. Explain volatile and synchronized. When would you use ReentrantLock?
5. How would you design a thread-safe singleton?

üî∏Collections & Concurrency
6. Difference between HashMap, LinkedHashMap, and TreeMap.
7. What is ConcurrentHashMap and how does it achieve thread safety?
8. Explain CopyOnWriteArrayList and its use cases.
9. How does Java handle deadlock? How would you detect and prevent it?
10. How would you implement a Producer-Consumer problem in Java?

üî∏Spring & Hibernate/JPA
11. Difference between @Component, @Service, and @Repository.
12. What is the N+1 select problem in Hibernate? How do you solve it?
13. How does Spring handle dependency injection internally?
14. What is lazy vs eager loading in JPA?
15. How do you configure caching in Spring Boot applications?

üî∏Microservices & System Design
16. How do services communicate in a microservices architecture?
17. What is API Gateway and how would you implement it?
18. How do you ensure fault tolerance in microservices?
19. How do you design a scalable order management system?
20. How do you secure REST APIs in Spring Boot?

üî∏Performance & Best Practices
21. How would you tune JVM for high-performance applications?
22. How do you profile and monitor a Java application in production?
23. What are memory leaks in Java? How do you prevent them?
24. How do you handle exceptions globally in Spring Boot?
25. What coding practices do you follow to write clean and maintainable Java code?


ùóñùóºùóøùó≤ ùóùùóÆùòÉùóÆ
 ‚Ä¢ Difference between HashMap, HashTable, and ConcurrentHashMap
 ‚Ä¢ How does Garbage Collection work in JVM?
 ‚Ä¢ Explain volatile and synchronized in multithreading
 ‚Ä¢ Deep copy vs Shallow copy
 ‚Ä¢ How does the Java memory model work (Heap, Stack, Metaspace)?

ùó¶ùóΩùóøùó∂ùóªùó¥ & ùó¶ùóΩùóøùó∂ùóªùó¥ ùóïùóºùóºùòÅ
 ‚Ä¢ What is Dependency Injection? How does Spring handle it internally?
 ‚Ä¢ Difference between @Component, @Service, and @Repository
 ‚Ä¢ How does Spring Boot auto-configuration work?
 ‚Ä¢ Exception handling best practices in REST APIs
 ‚Ä¢ How to secure REST APIs (JWT, OAuth2)?

ùóùùó£ùóî / ùóõùó∂ùóØùó≤ùóøùóªùóÆùòÅùó≤
 ‚Ä¢ Difference between Lazy and Eager loading
 ‚Ä¢ What are N+1 query problems? How to solve them?
 ‚Ä¢ How does Hibernate manage transactions?
 ‚Ä¢ Entity lifecycle states (Transient, Persistent, Detached, Removed)

ùó¶ùó§ùóü & ùóóùóÆùòÅùóÆùóØùóÆùòÄùó≤
 ‚Ä¢ Write a query to find the 2nd highest salary from Employee table
 ‚Ä¢ Difference between INNER JOIN, LEFT JOIN, RIGHT JOIN
 ‚Ä¢ What are indexes? Clustered vs Non-clustered
 ‚Ä¢ How to optimize slow queries?

ùóóùó¶ùóî / ùó£ùóøùóºùóØùóπùó≤ùó∫ ùó¶ùóºùóπùòÉùó∂ùóªùó¥
 ‚Ä¢ Implement LRU Cache
 ‚Ä¢ Detect a cycle in a linked list
 ‚Ä¢ Find longest substring without repeating characters
 ‚Ä¢ Merge overlapping intervals
 ‚Ä¢ Design a rate limiter

ùó¶ùòÜùòÄùòÅùó≤ùó∫ ùóóùó≤ùòÄùó∂ùó¥ùóª
 ‚Ä¢ Design a URL Shortener like bit.ly
 ‚Ä¢ How would you scale a notification service?
 ‚Ä¢ Difference between Monolith vs Microservices
 ‚Ä¢ Use of API Gateway and Load Balancer
 ‚Ä¢ CAP Theorem explanation with real-world examples
 
 üîπ Core Java
1Ô∏è‚É£ Difference between HashMap, ConcurrentHashMap, and Hashtable?
2Ô∏è‚É£ Explain Garbage Collection (CMS vs G1 GC).
3Ô∏è‚É£ Difference between synchronized, ReentrantLock, and ReadWriteLock.
4Ô∏è‚É£ Difference between Comparable vs Comparator.
5Ô∏è‚É£ Explain Java memory model (Heap, Stack, Metaspace).
6Ô∏è‚É£ How does volatile work internally?
7Ô∏è‚É£ Difference between wait(), sleep(), join().
8Ô∏è‚É£ How to resolve deadlock, starvation, livelock?
9Ô∏è‚É£ How do you make a class immutable?
üîü Best practices for checked vs unchecked exceptions.

üîπ Spring & Spring Boot
1Ô∏è‚É£1Ô∏è‚É£ Explain the Spring Bean lifecycle.
1Ô∏è‚É£2Ô∏è‚É£ Difference between @Component, @Service, @Repository, @Controller.
1Ô∏è‚É£3Ô∏è‚É£ How does Spring Boot auto-configuration work?
1Ô∏è‚É£4Ô∏è‚É£ Role of Spring Boot Starter dependencies.
1Ô∏è‚É£5Ô∏è‚É£ How to configure profiles in Spring Boot?
1Ô∏è‚É£6Ô∏è‚É£ Explain Spring Security (Authentication vs Authorization).
1Ô∏è‚É£7Ô∏è‚É£ How to implement JWT Authentication?
1Ô∏è‚É£8Ô∏è‚É£ Difference between @RestController vs @Controller.
1Ô∏è‚É£9Ô∏è‚É£ How to resolve circular dependencies in Spring?
2Ô∏è‚É£0Ô∏è‚É£ Explain @Transactional usage and propagation.

üîπ JPA / Hibernate
2Ô∏è‚É£1Ô∏è‚É£ Difference between Lazy vs Eager fetching.
2Ô∏è‚É£2Ô∏è‚É£ What is the N+1 select problem and how to fix it?
2Ô∏è‚É£3Ô∏è‚É£ Difference between merge(), persist(), saveOrUpdate().
2Ô∏è‚É£4Ô∏è‚É£ Explain 1st level vs 2nd level cache.
2Ô∏è‚É£5Ô∏è‚É£ How do you implement optimistic vs pessimistic locking?
2Ô∏è‚É£6Ô∏è‚É£ How to handle batch inserts/updates?
2Ô∏è‚É£7Ô∏è‚É£ How to write custom queries in Spring Data JPA?

üîπ Microservices & Architecture
2Ô∏è‚É£8Ô∏è‚É£ What are 12-factor app principles?
2Ô∏è‚É£9Ô∏è‚É£ How do microservices communicate (REST, gRPC, Messaging)?
3Ô∏è‚É£0Ô∏è‚É£ How to implement service discovery (Eureka, Consul)?
3Ô∏è‚É£1Ô∏è‚É£ Explain API Gateway pattern.
3Ô∏è‚É£2Ô∏è‚É£ How to handle distributed transactions?
3Ô∏è‚É£3Ô∏è‚É£ Difference between Monolithic vs Microservices.
3Ô∏è‚É£4Ô∏è‚É£ How to manage configurations (Spring Cloud Config, Vault)?
3Ô∏è‚É£5Ô∏è‚É£ How to implement circuit breaker & rate limiting (Resilience4j, Hystrix)?
3Ô∏è‚É£6Ô∏è‚É£ Difference between synchronous vs asynchronous communication.
3Ô∏è‚É£7Ô∏è‚É£ How do you ensure idempotency in REST APIs?

üîπ System Design
3Ô∏è‚É£8Ô∏è‚É£ Design a high-availability payment system.
3Ô∏è‚É£9Ô∏è‚É£ Design a low-latency stock trading API.
4Ô∏è‚É£0Ô∏è‚É£ How to isolate a frequently failing microservice?
4Ô∏è‚É£1Ô∏è‚É£ How to ensure backward compatibility in APIs?
4Ô∏è‚É£2Ô∏è‚É£ How to scale a Spring Boot service for 1M+ users?

üü¶ Java 
1. How do virtual threads introduced in Java 21 differ from platform threads? 
2. What are the advantages of sealed classes compared to abstract classes and interfaces? 
3. Explain how the record keyword reduces boilerplate code in Java. 
4. What is the difference between Optional.orElse() and Optional.orElseGet()? 
5. How does garbage collection differ between G1 GC and ZGC? 
6. Explain the usage of pattern matching for instanceof in Java 16+. 
7. What are the differences between HashMap and ConcurrentHashMap? 
8. How does Java handle string pooling, and what are its benefits? 
9. What are switch expressions, and how do they improve readability? 
10. Explain the role of the Fork/Join framework. 

üü¶ Spring + Spring Boot 
11. What is the role of @ConfigurationProperties in Spring Boot? 
12. How does the @Lazy annotation work in Spring? 
13. Explain the difference between ApplicationContext and WebApplicationContext. 
14. How do you configure database connection pooling in Spring Boot? 
15. What is Spring Boot actuator, and how is it used for production monitoring? 
16. How do you configure custom error handling for REST APIs in Spring Boot? 
17. Explain the use of @Profile in Spring Boot applications. 
18. What are some strategies for improving startup time of Spring Boot applications? 
19. How does Spring Boot integrate with cloud configuration services? 
20. How do you secure microservices APIs with OAuth2 in Spring Security? 

üü¶ Microservices 
21. What is the difference between synchronous communication (REST) and asynchronous communication (Kafka, RabbitMQ)? 
22. How do you implement service discovery in a microservices architecture? 
23. What is the saga pattern, and when should you use it? 
24. How do you design microservices to avoid tight coupling? 

üü¶ Coding Questions 
25. Write a program to check if a binary tree is height-balanced. 
26. Implement a function to find the longest palindrome substring in a given string. 
27. Write a method to perform level-order traversal of a binary tree. 

üü® Others 
28. How do you configure persistent storage in Kubernetes pods? 
29. What is the difference between a topic and a queue in message brokers? 
30. Write a SQL query to get the nth highest salary from the employee table. 
31. How do you secure sensitive configuration data (like DB passwords) in Docker/Kubernetes? 
32. What is the role of IAM policies in AWS? 
33. How do you perform blue-green deployment in Kubernetes? 

Round 1: Coding + Core Java + Spring Boot
Coding Problem:
Find the minimum number of meeting rooms required (classic interval scheduling problem).
Java & Spring Boot Questions:
Serialization vs Deserialization
Java 8 features (Streams, Lambdas, Optional, etc.)
Design Patterns I‚Äôve used in real projects
Singleton (Lazy, Eager, Double-Checked Locking, Enum-based)
Factory vs Strategy
Multithreading: Futures & Executors
REST APIs: @PostMapping vs @PutMapping

Round 2: System Design + Databases
An array manipulation kind of Java code
Database Fundamentals:
SQL vs NoSQL
Constraints in SQL (Primary vs Unique Key)
CAP Theorem explained
Scaling with Large Data (Millions of Rows):
Optimizations: Indexing, Partitioning/Sharding
Caching techniques + handling cache eviction/full cache scenarios
Server-side data handling strategies
Master-Slave Database setup
Consistent Hashing for Distributed Systems

üî• Core Java & OOPS

1Ô∏è‚É£ What is the difference between Abstraction and Encapsulation in Java?
2Ô∏è‚É£ Can we use a null key in a HashMap?
3Ô∏è‚É£ How do we retrieve the value of a null key from a HashMap?
4Ô∏è‚É£ How is a null key stored internally in HashMap buckets?
5Ô∏è‚É£ Explain the Liskov Substitution Principle (LSP) in SOLID design principles.
6Ô∏è‚É£ What is the Singleton Design Pattern and where is it used?
7Ô∏è‚É£ How do we implement a Singleton using Enum in Java?
8Ô∏è‚É£ How can we prevent cloning of a Singleton class?

‚∏ª

üß© Problem-Solving & DSA

9Ô∏è‚É£ Given an array {1, 2, 3, 5, 7} and input 3, write a program to find the position of the input.
üîü Given an array {1, 2, 4, 5, 7} and input 3, write a program to find the position where 3 should be inserted in order.
1Ô∏è‚É£1Ô∏è‚É£ If the array contains duplicates {1, 2, 2, 4, 5, 7}, what will be the index position for inserting 3?

‚∏ª

‚òï Java Streams

1Ô∏è‚É£2Ô∏è‚É£ You have a list of users, each with a department. Write a program (using Java Streams) to group users department-wise.
1Ô∏è‚É£3Ô∏è‚É£ Explain the usage of Collectors.groupingBy() and Collectors.counting().

‚∏ª

üå± Spring Boot

1Ô∏è‚É£4Ô∏è‚É£ What are the fundamental annotations commonly used in Spring Boot projects?

‚∏ª

üóÑÔ∏è SQL Queries

1Ô∏è‚É£5Ô∏è‚É£ In a users table with a column username:
üîπ Write a query to fetch all users whose username starts with a given letter.
üîπ Write a query to fetch all users where the username starts with ‚ÄòA‚Äô.
üîπ Write a query to fetch all users where the second letter of the username is ‚ÄòA‚Äô.

‚ô¶Ô∏è Core Java (OOPs, Collections, Concurrency Basics)
1Ô∏è‚É£ Difference between List, Set, and Map with real use cases.
2Ô∏è‚É£ How does HashMap handle collisions internally?
3Ô∏è‚É£ Explain difference between Comparable and Comparator.
4Ô∏è‚É£ What is the use of volatile in Java?
5Ô∏è‚É£ Difference between synchronized method vs synchronized block.

‚ô¶Ô∏è Spring & Spring Boot
6Ô∏è‚É£ What is the role of Spring Boot Starter dependencies?
7Ô∏è‚É£ Difference between @Autowired and @Qualifier.
8Ô∏è‚É£ How do you handle global exception handling in Spring Boot REST APIs?
9Ô∏è‚É£ What is the difference between application.properties and application.yml?
üîü How do you implement Spring Boot profiles for different environments?

‚ô¶Ô∏è JPA / Hibernate
1Ô∏è‚É£1Ô∏è‚É£ What is the difference between save(), saveOrUpdate(), and persist() in Hibernate?
1Ô∏è‚É£2Ô∏è‚É£ Explain lazy loading and how to avoid LazyInitializationException.
1Ô∏è‚É£3Ô∏è‚É£ What is the difference between native query and JPQL?
1Ô∏è‚É£4Ô∏è‚É£ How does @OneToMany mapping work?
1Ô∏è‚É£5Ô∏è‚É£ Explain optimistic vs pessimistic locking in JPA.

‚ô¶Ô∏è Microservices & Architecture 
1Ô∏è‚É£6Ô∏è‚É£ Difference between monolithic and microservices architecture.
1Ô∏è‚É£7Ô∏è‚É£ How do you implement service registry & discovery (Eureka/Consul)?
1Ô∏è‚É£8Ô∏è‚É£ What is the role of API Gateway in microservices?
1Ô∏è‚É£9Ô∏è‚É£ How do you handle configuration management in microservices?
2Ô∏è‚É£0Ô∏è‚É£ What is the circuit breaker pattern and where do you use it?

‚ô¶Ô∏è Cloud & DevOps Basics
2Ô∏è‚É£1Ô∏è‚É£ What is the difference between Docker image and Docker container?
2Ô∏è‚É£2Ô∏è‚É£ Explain how a CI/CD pipeline works in real-time projects.
2Ô∏è‚É£3Ô∏è‚É£ What is load balancing and how is it achieved in cloud?
2Ô∏è‚É£4Ô∏è‚É£ How do you monitor a Spring Boot app (Actuator, Prometheus, ELK)?
2Ô∏è‚É£5Ô∏è‚É£ Difference between scaling vertically vs horizontally with examples.


1. Explain the difference between volatile, synchronized, and Atomic variables in Java.
2. How does the Java Memory Model (JMM) handle visibility and ordering of threads?
3. What is the difference between CompletableFuture and traditional Future in Java?
4. How do you implement a custom annotation in Java and process it at runtime?
5. Explain the difference between checked, unchecked, and error types in Java.
6. How does Garbage Collection work in Java 17+ (including G1 GC and ZGC)?
7. What are memory leaks in Java, and how do you detect and fix them?
8. How does Optional help in avoiding NullPointerException?
9. How do you implement caching in Spring Boot (with @Cacheable, @CacheEvict)?
10. What is the difference between BeanFactory and ApplicationContext?
11. Explain the Bean lifecycle in Spring (with example).
12. What are @Lazy and @DependsOn annotations in Spring, and when to use them?
13. How does Spring Boot auto-configuration work internally?
14. What is the role of spring.factories in Spring Boot?
15. What is the difference between application‚Ä§properties and application.yml in Spring Boot?
16. How do you implement transaction management in Spring Boot (declarative vs programmatic)?
17. Explain the difference between @Transactional propagation types in Spring.
18. What is the difference between JpaRepository and CrudRepository in Spring Data JPA?
19. How do you handle pagination and sorting in Spring Data JPA?
20. How to implement a custom query in Spring Data JPA using @Query annotation?
21. Explain how to implement exception handling in REST APIs using @ControllerAdvice and @ExceptionHandler.
22. What is the difference between @RestController and @Controller in Spring?
23. How do you secure a REST API using Spring Security and JWT?
24. What is the difference between Kafka‚Äôs producer and consumer configurations in a Spring Boot microservice?
25. How do you design an event-driven microservice architecture using Spring Boot, Kafka, and REST APIs?


‚úÖ Core Java ‚Äì Fundamentals & OOP
üîπ Abstract class vs Interface ‚Äì when to use which?
 üîπ Constructors & Static methods
 üîπ final, finally, finalize() differences
 üîπ String vs StringBuilder vs StringBuffer
 üîπ equals() vs ==
 üîπ ArrayList default size & resizing
 üîπ sleep() vs wait()
 üîπ Serialization & marker interfaces

‚úÖ Java 8+ Features
üöÄ Lambda & Functional Interfaces (@FunctionalInterface)
 üöÄ Stream API ‚Üí map, filter, reduce, collect
 üöÄ map() vs flatMap()
 üöÄ Optional API (ifPresent, orElse)
 üöÄ Default methods in Interfaces
 üöÄ CompletableFuture ‚Äì async programming
 üöÄ HashMap vs LinkedHashMap vs TreeMap
 üöÄ Comparator vs Comparable

‚úÖ Multithreading & Concurrency
‚ö° Thread lifecycle, Thread vs Runnable
 ‚ö° Synchronization & deadlock prevention
 ‚ö° volatile vs Atomic variables
 ‚ö° ExecutorService ‚Üí execute() vs submit()
 ‚ö° ThreadPoolExecutor ‚Äì fixed vs cached pool
 ‚ö° Producer-Consumer problem
 ‚ö° Fail-fast vs fail-safe iterators
 ‚ö° ConcurrentHashMap vs HashMap

‚úÖ Spring Core & Spring Boot
üå± What is Spring Boot & advantages
 üå± @Component vs @Service vs @Repository vs @Controller
 üå± Auto-configuration ‚Äì how it works
 üå± IoC & Dependency Injection (constructor/setter/field)
 üå± @Autowired & circular dependencies
 üå± Bean scopes (singleton, prototype, request, session)
 üå± Profiles (@Profile)
 üå± CommandLineRunner vs ApplicationRunner

‚úÖ Exception Handling & Security
üîí @Controller vs @RestController
 üîí Global exception handling with @ControllerAdvice
 üîí Checked vs Unchecked exceptions
 üîí 401 vs 404 vs 503 errors
 üîí Spring Security ‚Äì Authentication vs Authorization
 üîí JWT ‚Äì expiration, refresh tokens
 üîí SecurityFilterChain (Spring Boot 3+)
 üîí Role-based access restrictions

‚úÖ Microservices & Cloud
üåê Monolith vs Microservices
 üåê Service communication (REST, gRPC, Kafka)
 üåê API Gateway & Service Discovery (Eureka/Consul)
 üåê Circuit Breaker (Resilience4j, Hystrix)
 üåê Saga Pattern for distributed transactions
 üåê Centralized config (Spring Cloud Config)
 üåê Resilience ‚Üí retry, fallback
 üåê Deployment ‚Üí Docker & Kubernetes

‚úÖ JPA, Databases & SQL
üóÑÔ∏è JPA Repositories & CRUD
 üóÑÔ∏è @Transactional & propagation
 üóÑÔ∏è Lazy vs Eager fetching
 üóÑÔ∏è N+1 select problem
 üóÑÔ∏è Hibernate caching (L1/L2)
 üóÑÔ∏è Multiple DB configurations in Spring Boot
 
 
 Creational Patterns
- Singleton ‚Üí One instance shared globally (e.g., Logger, Config)
- Factory Method ‚Üí Create objects without exposing creation logic
- Abstract Factory ‚Üí Factory of factories (UI toolkit themes)
- Builder ‚Üí Step-by-step object construction (e.g., StringBuilder)
- Prototype ‚Üí Clone existing objects instead of creating new ones

Structural Patterns
- Adapter ‚Üí Convert one interface into another (e.g., legacy API wrapper)
- Decorator ‚Üí Add functionality dynamically (e.g., I/O Streams)
- Proxy ‚Üí Control access to an object (e.g., Lazy loading, Security proxy)
- Facade ‚Üí Simplify complex subsystems with a single interface
- Composite ‚Üí Tree-like structures (e.g., DOM, Filesystem)
- Flyweight ‚Üí Share common objects to save memory (e.g., String Pool)


Behavioral Patterns
- Observer ‚Üí Notify multiple objects when state changes (e.g., Event listeners)
- Strategy ‚Üí Switch algorithms at runtime (e.g., Payment gateways)
- Command ‚Üí Encapsulate requests (e.g., Undo/Redo)
- Chain of Responsibility ‚Üí Pass request along a chain (e.g., Filters, Middleware)
- State ‚Üí Change behavior when internal state changes (e.g., Order lifecycle)
- Template Method ‚Üí Define algorithm skeleton, let subclasses override steps
üîπ Core Java & Advanced Java

1Ô∏è‚É£ Explain how HashMap works internally. When can it fail in a multi-threaded environment?
2Ô∏è‚É£ Difference between Comparable vs Comparator with real use cases.
3Ô∏è‚É£ How does JVM Garbage Collection work? Which GC strategies have you tuned in projects?
4Ô∏è‚É£ What is volatile, synchronized, and ConcurrentHashMap? When to use each?

üîπ Spring & Spring Boot

5Ô∏è‚É£ How does Spring IoC Container work internally?
6Ô∏è‚É£ Difference between @Component, @Service, @Repository.
7Ô∏è‚É£ How does @Transactional work? Explain isolation levels.
8Ô∏è‚É£ What is the role of Spring Boot Auto-Configuration?
9Ô∏è‚É£ How do you implement exception handling globally in Spring Boot?

üîπ Microservices & System Design

üîü How do two microservices communicate? Difference between sync (REST) vs async (Kafka)?
1Ô∏è‚É£1Ô∏è‚É£ How do you implement service discovery in Spring Cloud (Eureka/Consul)?
1Ô∏è‚É£2Ô∏è‚É£ Explain Circuit Breaker pattern (Resilience4j) with example.
1Ô∏è‚É£3Ô∏è‚É£ How would you design a payment service that handles 1M+ daily transactions?

üîπ SQL & Database

1Ô∏è‚É£4Ô∏è‚É£ Difference between LEFT JOIN, INNER JOIN, CROSS JOIN.
1Ô∏è‚É£5Ô∏è‚É£ How do you optimize a query that takes 10+ seconds?
1Ô∏è‚É£6Ô∏è‚É£ How do you implement optimistic vs pessimistic locking in SQL?

üîπ Coding Round (Hands-On)

1Ô∏è‚É£7Ô∏è‚É£ Write a program to find the top 5 most frequent transactions from millions of records.
1Ô∏è‚É£8Ô∏è‚É£ Implement LRU Cache in Java.
1Ô∏è‚É£9Ô∏è‚É£ Design an API that books train tickets ensuring no two users book the same seat at the same time.

üîπ Project / Real-Time Scenarios

2Ô∏è‚É£0Ô∏è‚É£ Explain a project where you improved system performance ‚Äî what changes did you make?
2Ô∏è‚É£1Ô∏è‚É£ How do you handle transactions across multiple microservices?
2Ô∏è‚É£2Ô∏è‚É£ If a service goes down in production, how would you troubleshoot & recover quickly?


‚ô¶Ô∏è Core Java (OOPs, Collections, Concurrency Basics)
1Ô∏è‚É£ Difference between List, Set, and Map with real use cases.
2Ô∏è‚É£ How does HashMap handle collisions internally?
3Ô∏è‚É£ Explain difference between Comparable and Comparator.
4Ô∏è‚É£ What is the use of volatile in Java?
5Ô∏è‚É£ Difference between synchronized method vs synchronized block.

‚ô¶Ô∏è Spring & Spring Boot
6Ô∏è‚É£ What is the role of Spring Boot Starter dependencies?
7Ô∏è‚É£ Difference between @Autowired and @Qualifier.
8Ô∏è‚É£ How do you handle global exception handling in Spring Boot REST APIs?
9Ô∏è‚É£ What is the difference between application.properties and application.yml?
üîü How do you implement Spring Boot profiles for different environments?

‚ô¶Ô∏è JPA / Hibernate
1Ô∏è‚É£1Ô∏è‚É£ What is the difference between save(), saveOrUpdate(), and persist() in Hibernate?
1Ô∏è‚É£2Ô∏è‚É£ Explain lazy loading and how to avoid LazyInitializationException.
1Ô∏è‚É£3Ô∏è‚É£ What is the difference between native query and JPQL?
1Ô∏è‚É£4Ô∏è‚É£ How does @OneToMany mapping work?
1Ô∏è‚É£5Ô∏è‚É£ Explain optimistic vs pessimistic locking in JPA.

‚ô¶Ô∏è Microservices & Architecture 
1Ô∏è‚É£6Ô∏è‚É£ Difference between monolithic and microservices architecture.
1Ô∏è‚É£7Ô∏è‚É£ How do you implement service registry & discovery (Eureka/Consul)?
1Ô∏è‚É£8Ô∏è‚É£ What is the role of API Gateway in microservices?
1Ô∏è‚É£9Ô∏è‚É£ How do you handle configuration management in microservices?
2Ô∏è‚É£0Ô∏è‚É£ What is the circuit breaker pattern and where do you use it?

‚ô¶Ô∏è Cloud & DevOps Basics
2Ô∏è‚É£1Ô∏è‚É£ What is the difference between Docker image and Docker container?
2Ô∏è‚É£2Ô∏è‚É£ Explain how a CI/CD pipeline works in real-time projects.
2Ô∏è‚É£3Ô∏è‚É£ What is load balancing and how is it achieved in cloud?
2Ô∏è‚É£4Ô∏è‚É£ How do you monitor a Spring Boot app (Actuator, Prometheus, ELK)?
2Ô∏è‚É£5Ô∏è‚É£ Difference between scaling vertically vs horizontally with examples.